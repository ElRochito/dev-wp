namespace :db do

  desc "Creates a sensible backup name for SQL files"
  task :backup_name do
    now = Time.now
    backup_path = "";

    on roles(:web) do
      backup_path = "#{shared_path}"
      execute :mkdir, "-p #{backup_path}/backups/#{fetch(:stage).to_s}"
    end

    on roles(:local) do
      backup_path = fetch(:shared)
      execute :mkdir, "-p /var/www/backups/local"
    end

    backup_time = [now.year,now.month,now.day,now.hour,now.min,now.sec].join()
    set :backup_filename, backup_time
    set :backup_file, "#{backup_path}/backups/#{fetch(:stage).to_s}/#{backup_time}.sql"
  end

  desc "Confirms the database action before proceeeding"
  task :confirm do
    on roles(:web) do
      database = YAML::load_file('config/database.yml')[fetch(:stage).to_s]

      set :confirmed, proc {
        puts <<-WARN
  \033[31m
  ========================================================================

    WARNING: You're about to overwrite the database!
    To continue, please enter the name of the database for this site.

    Datebase name:\033[0m \033[1m \033[34m #{database['database']} \033[0m \033[22m \033[31m

  ========================================================================
  \033[0m
        WARN
        ask :answer, database['database']
        if fetch(:answer) == database['database'] then
          true
        else
          loopCount = 1
          loop do
            loopCount = loopCount + 1
            puts "\033[31mYou typed the database name incorrectly. Please enter \033[0m\033[1m\033[34m#{database['database']}\033[0m\033[22m\033[0m\033[0m"
            ask :answer, database['database']
            break if loopCount == 3
            break if fetch(:answer) == database['database']
          end
        end

        if fetch(:answer) == database['database'] then
          true
        end
      }.call

      unless fetch(:confirmed)
        puts <<-WARN
  \033[31m
  ========================================================================
    Sorry, you have entered the database name incorrectly too many times
  ========================================================================
  \033[0m
        WARN
        exit
      end

    end
  end

  desc "Takes a database dump from local"
  task :backup_local do
    invoke 'db:backup_name'
    on roles(:db) do
      system('mkdir -p backups')
      project_path = fetch(:project_path)
      within project_path do
         execute :wp, "db export #{fetch(:backup_file)}  --path=\"dev-wp/wordpress\""
      end
    end
  end

  desc "Takes a database dump from remote server"
  task :backup do
    invoke 'db:backup_name'
	on roles(:db) do
      within release_path do
	    execute :wp, "db export #{fetch(:backup_file)} --add-drop-table --path=\"dev-wp/wordpress\""
	  end

	  # system('mkdir -p db_backups')
	  download! "#{fetch(:backup_file)}", "backups/#{fetch(:backup_filename)}.sql"

	  within release_path do
	    execute :rm, "#{fetch(:backup_file)}"
	  end
    end
  end

  desc "Imports the remote database into your local environment"
  task :pull do
    invoke 'db:backup'

    on roles(:db) do
      run_locally do
        execute :wp, "db import backups/#{fetch(:backup_filename)}.sql --path=\"dev-wp/wordpress\""
        execute :wp, "search-replace #{fetch(:stage_url)} #{fetch(:wp_localurl)} --path=\"dev-wp/wordpress\""
        execute :rm, "backups/#{fetch(:backup_filename)}.sql"
        if Dir['backups/*'].empty?
          execute :rmdir, "backups"
		end
      end
    end
  end

  desc "Imports the local database into your remote environment"
  task :push do
    invoke 'db:confirm'

    invoke 'db:backup_name'
	on roles(:db) do
      run_locally do
        execute :mkdir, "-p db_backups"
        execute :wp, "db export db_backups/#{fetch(:backup_filename)}.sql --add-drop-table --path=\"dev-wp/wordpress\""
      end

      print "db_backups/#{fetch(:backup_filename)}.sql"
      print "#{fetch(:backup_file)}"

      upload! "db_backups/#{fetch(:backup_filename)}.sql", "#{fetch(:backup_file)}"

      within release_path do
        execute :wp, "db import #{fetch(:backup_file)} --path=\"dev-wp/wordpress\""
        execute :wp, "search-replace #{fetch(:wp_localurl)} #{fetch(:stage_url)} --path=\"dev-wp/wordpress\""
        execute :rm, "#{fetch(:backup_file)}"
      end

      run_locally do
        execute :rm, "db_backups/#{fetch(:backup_filename)}.sql"
        if Dir['db_backups/*'].empty?
          execute :rmdir, "db_backups"
        end
      end
    end
  end
end
